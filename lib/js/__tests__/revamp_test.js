// Generated by BUCKLESCRIPT VERSION 1.8.3, PLEASE EDIT WITH CARE
'use strict';

var Jest     = require("bs-jest/lib/js/src/jest.js");
var Revamp   = require("../src/revamp.js");
var Sequence = require("../src/sequence.js");

var re = Revamp.compile(/* None */0, "na");

describe("compile", (function () {
        return /* () */0;
      }));

describe("forEach", (function () {
        var run = function (input) {
          var results = /* array */[];
          Sequence.forEach((function (m) {
                  return results.push(m);
                }), Revamp.matches(input, re));
          return results;
        };
        Jest.test("match", (function () {
                return Jest.Expect[/* toEqual */11](/* array */[
                              "na",
                              "na"
                            ])(Jest.Expect[/* expect */0](run("bananas")));
              }));
        return Jest.test("no match", (function () {
                      return Jest.Expect[/* toEqual */11](/* array */[])(Jest.Expect[/* expect */0](run("apples")));
                    }));
      }));

describe("test", (function () {
        Jest.test("match", (function () {
                return Jest.Expect[/* toBe */1](/* true */1)(Jest.Expect[/* expect */0](Revamp.test("banana", re)));
              }));
        return Jest.test("no match", (function () {
                      return Jest.Expect[/* toBe */1](/* false */0)(Jest.Expect[/* expect */0](Revamp.test("apples", re)));
                    }));
      }));

describe("count", (function () {
        Jest.test("match", (function () {
                return Jest.Expect[/* toBe */1](2)(Jest.Expect[/* expect */0](Revamp.count("banana", re)));
              }));
        return Jest.test("no match", (function () {
                      return Jest.Expect[/* toBe */1](0)(Jest.Expect[/* expect */0](Revamp.count("apples", re)));
                    }));
      }));

describe("find", (function () {
        Jest.test("match", (function () {
                return Jest.Expect[/* toEqual */11](/* Some */[/* tuple */[
                                "na",
                                2,
                                /* array */["na"]
                              ]])(Jest.Expect[/* expect */0](Revamp.find("banana", re)));
              }));
        return Jest.test("no match", (function () {
                      return Jest.Expect[/* toBe */1](/* None */0)(Jest.Expect[/* expect */0](Revamp.find("apples", re)));
                    }));
      }));

exports.re = re;
/* re Not a pure module */
